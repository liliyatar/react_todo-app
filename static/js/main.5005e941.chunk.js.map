{"version":3,"sources":["TodoItem.js","TodoList.js","TodoHeader.js","TodosFilter.js","TodoFooter.js","App.js","index.js"],"names":["TodoItem","_ref","todo","handleCheck","handleDelete","react_default","a","createElement","className","isCompleted","key","id","type","checked","onChange","title","onClick","TodoList","todos","map","todoItem","src_TodoItem","TodoHeader","state","handleInputChange","value","target","_this","setState","replace","handleSubmit","event","preventDefault","props","addTodo","this","onSubmit","placeholder","React","Component","TodosFilter","filterIdentifier","toggleFilterIdentifier","removeCompletedTodos","Fragment","href","filter","length","style","display","TodoFooter","amountOfActiveTodos","src_TodosFilter","App","todoList","originalTodoList","idCounter","handleAddTodo","prevState","concat","Object","toConsumableArray","filterTodoList","toggleAllTodosCompleted","objectSpread2","some","t","toggleTodoCompleted","deleteTodo","identifier","_this$state","src_TodoHeader","every","htmlFor","src_TodoList","src_TodoFooter","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.5005e941.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\n\nconst TodoItem = ({ todo, handleCheck, handleDelete }) => (\n  <li className={todo.isCompleted ? 'completed' : ''} key={todo.id}>\n    <div className=\"view\">\n      <input\n        type=\"checkbox\"\n        className=\"toggle\"\n        id={todo.id}\n        checked={todo.isCompleted}\n        onChange={() => handleCheck(todo.id)}\n      />\n      <label className=\"todo\">{todo.title}</label>\n      <button\n        type=\"button\"\n        className=\"destroy\"\n        onClick={() => handleDelete(todo.id)}\n      />\n    </div>\n  </li>\n);\n\nTodoItem.propTypes = {\n  todo: PropTypes\n    .shape({\n      isCompleted: PropTypes.bool.isRequired,\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired,\n  handleCheck: PropTypes.func.isRequired,\n  handleDelete: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({ todos, handleDelete, handleCheck }) => (\n  <ul className=\"todo-list\">\n    {todos.map(todoItem => (\n      <TodoItem\n        todo={todoItem}\n        key={todoItem.id}\n        handleCheck={handleCheck}\n        handleDelete={handleDelete}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      isCompleted: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n  handleCheck: PropTypes.func.isRequired,\n  handleDelete: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TodoHeader extends React.Component {\n  state = {\n    title: '',\n  };\n\n  handleInputChange = ({ target: { value } }) => {\n    this.setState({\n      title: value.replace(/^\\s+/, ''),\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { title } = this.state;\n\n    if (title) {\n      this.props.addTodo(title);\n\n      this.setState({\n        title: '',\n      });\n    }\n  };\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit} className=\"main\">\n        <h1>todos</h1>\n        <input\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={title}\n          onChange={this.handleInputChange}\n        />\n      </form>\n    );\n  }\n}\n\nTodoHeader.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodosFilter = ({\n  todos,\n  filterIdentifier,\n  toggleFilterIdentifier,\n  removeCompletedTodos,\n}) => (\n  <>\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className={filterIdentifier === 'all' ? 'selected' : ''}\n          onClick={() => toggleFilterIdentifier('all')}\n        >\n          All\n        </a>\n      </li>\n      <li>\n        <a\n          href=\"#/active\"\n          className={filterIdentifier === 'active' ? 'selected' : ''}\n          onClick={() => toggleFilterIdentifier('active')}\n        >\n          Active\n        </a>\n      </li>\n      <li>\n        <a\n          href=\"#/completed\"\n          className={filterIdentifier === 'completed' ? 'selected' : ''}\n          onClick={() => toggleFilterIdentifier('completed')}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n    {todos.filter(todo => todo.isCompleted).length > 0 && (\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        style={{ display: 'block' }}\n        onClick={removeCompletedTodos}\n      >\n        Clear completed\n      </button>\n    )}\n  </>\n);\n\nTodosFilter.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string,\n      isCompleted: PropTypes.bool,\n    }).isRequired,\n  ).isRequired,\n  filterIdentifier: PropTypes.string.isRequired,\n  toggleFilterIdentifier: PropTypes.func.isRequired,\n  removeCompletedTodos: PropTypes.func.isRequired,\n};\n\nexport default TodosFilter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodosFilter from './TodosFilter';\n\nconst TodoFooter = ({\n  todos,\n  toggleFilterIdentifier,\n  removeCompletedTodos,\n  filterIdentifier,\n  amountOfActiveTodos,\n}) => (\n  <section className=\"footer\">\n    <span className=\"todo-count\">\n      {amountOfActiveTodos}\n      {' '}\n      {amountOfActiveTodos === 1\n        ? 'item left'\n        : 'items left'\n      }\n    </span>\n    <TodosFilter\n      todos={todos}\n      filterIdentifier={filterIdentifier}\n      toggleFilterIdentifier={toggleFilterIdentifier}\n      removeCompletedTodos={removeCompletedTodos}\n    />\n  </section>\n);\n\nTodoFooter.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string,\n      isCompleted: PropTypes.bool,\n    }).isRequired,\n  ).isRequired,\n  filterIdentifier: PropTypes.string.isRequired,\n  amountOfActiveTodos: PropTypes.number.isRequired,\n  toggleFilterIdentifier: PropTypes.func.isRequired,\n  removeCompletedTodos: PropTypes.func.isRequired,\n};\n\nexport default TodoFooter;\n","import React from 'react';\nimport TodoList from './TodoList';\nimport TodoHeader from './TodoHeader';\nimport TodoFooter from './TodoFooter';\n\nclass App extends React.Component {\n  state = {\n    todoList: [],\n    originalTodoList: [],\n    idCounter: 0,\n    filterIdentifier: 'all',\n  };\n\n  handleAddTodo = (title) => {\n    this.setState(prevState => ({\n      originalTodoList: [\n        ...prevState.originalTodoList,\n        {\n          id: prevState.idCounter + 1,\n          title,\n          isCompleted: false,\n        },\n      ],\n\n      idCounter: prevState.idCounter + 1,\n    }));\n\n    this.filterTodoList();\n  };\n\n  filterTodoList = () => {\n    this.setState((prevState) => {\n      const { filterIdentifier, originalTodoList } = prevState;\n\n      switch (filterIdentifier) {\n        case 'active':\n          return ({\n            todoList: originalTodoList.filter(todo => !todo.isCompleted),\n          });\n        case 'completed':\n          return ({\n            todoList: originalTodoList.filter(todo => todo.isCompleted),\n          });\n        default:\n          return ({\n            todoList: [...originalTodoList],\n          });\n      }\n    });\n  };\n\n  toggleAllTodosCompleted = () => {\n    this.setState(prevState => ({\n      originalTodoList: prevState.originalTodoList.map(todo => ({\n        ...todo,\n        isCompleted: prevState.originalTodoList.some(t => !t.isCompleted),\n      })),\n    }));\n\n    this.filterTodoList();\n  };\n\n  toggleTodoCompleted = (id) => {\n    this.setState(prevState => ({\n      originalTodoList: prevState.originalTodoList.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            isCompleted: !todo.isCompleted,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n\n    this.filterTodoList();\n  };\n\n  deleteTodo = (id) => {\n    this.setState(prevState => ({\n      originalTodoList: prevState.originalTodoList\n        .filter(todoItem => todoItem.id !== id),\n    }));\n\n    this.filterTodoList();\n  };\n\n  toggleFilterIdentifier = (identifier) => {\n    this.setState({\n      filterIdentifier: identifier,\n    });\n\n    this.filterTodoList();\n  };\n\n  removeCompletedTodos = () => {\n    this.setState(prevState => ({\n      originalTodoList: prevState.originalTodoList\n        .filter(todoItem => !todoItem.isCompleted),\n    }));\n\n    this.filterTodoList();\n  };\n\n  render() {\n    const {\n      todoList,\n      originalTodoList,\n      filterIdentifier,\n    } = this.state;\n    const amountOfActiveTodos = originalTodoList\n      .filter(todo => !todo.isCompleted).length;\n\n    return (\n      <section className=\"todoapp\">\n        <TodoHeader addTodo={this.handleAddTodo} />\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            checked={this.state.todoList.every(todo => todo.isCompleted)}\n            onClick={this.toggleAllTodosCompleted}\n          />\n          {originalTodoList.length > 0 && (\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          )}\n          <TodoList\n            todos={todoList}\n            handleCheck={this.toggleTodoCompleted}\n            handleDelete={this.deleteTodo}\n          />\n        </section>\n\n        {(originalTodoList.length > 0) && (\n          <TodoFooter\n            todos={todoList}\n            amountOfActiveTodos={amountOfActiveTodos}\n            filterIdentifier={filterIdentifier}\n            toggleFilterIdentifier={this.toggleFilterIdentifier}\n            removeCompletedTodos={this.removeCompletedTodos}\n          />\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}